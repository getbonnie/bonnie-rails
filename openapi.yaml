openapi: 3.0.0
servers:
  - url: 'https://api.getbonnie.com'
    description: Production server
  - url: 'https://api-dev.getbonnie.com'
    description: Staging server
info:
  description: >-
    All API routes for the app Bonnie.
  version: 1.0.0
  title: Bonnie API
  termsOfService: http://getbonnie.com/terms/
  contact:
    name: Kevin Kuipers
    email: kevin@getbonnie.com
paths:
  # =========================================================================
  # Emotions
  # =========================================================================
  /emotions:
    get:
      tags:
        - lib
      operationId: getEmotions
      summary: Returns emotions available for reactions and comments
      security:
        - Jwt: []
      responses:
        '200':
          description: Returns an array of emotions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Emotions'
  # =========================================================================
  # Users
  # =========================================================================
  /me:
    get:
      tags:
        - user
      operationId: getMe
      summary: Return personal information.
      security:
        - Jwt: []
      responses:
        '200':
          description: Return the reaction inserted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMe'
  # =========================================================================
  # Reactions
  # =========================================================================
  /reactions:
    post:
      tags:
        - reactions
      operationId: createReaction
      summary: Create a new reaction.
      security:
        - Jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReactionPost'
      responses:
        '200':
          description: Return the reaction inserted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reaction'
  # =========================================================================
  # Topics
  # =========================================================================
  /topics:
    get:
      tags:
        - topics
      operationId: getTopics
      summary: Returns live topics
      security:
        - Jwt: []
      responses:
        '200':
          description: Returns an array of topics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topics'
components:
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # SCHEMAS
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  schemas:
    # =========================================================================
    # Categories
    # =========================================================================
    Category:
      example:
        {
          "id": 2,
          "name": "Sport",
          "color": "#2CDC6B"
        }
      properties:
        id:
          type: integer
        name:
          type: string
        color:
          type: string
    # =========================================================================
    # Emotions
    # =========================================================================
    Emotion:
      example:
        {
          "id": 1,
          "name": "Crying",
          "illustration": "{url}"
        }
      properties:
        id:
          type: integer
        name:
          type: string
        illustration:
          type: string
    Emotions:
      example:
        {
          "data": [
            {
              "id": 1,
              "name": "Laughing",
              "illustration": "{url}"
            }
          ]
        }
      type: array
      items:
        $ref: '#/components/schemas/Emotion'
    # =========================================================================
    # Users
    # =========================================================================
    UserMe:
      example:
        {
          "data": {
            "uuid": "{uuid}",
            "name": "Raymond",
            "status": "active",
            "notify_comments": false,
            "notify_likes": true,
            "notify_features": false,
            "notify_ads": false
          }
        }
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
          enum: [pending, active, suspended, deleted]
        notify_comments:
          type: boolean
        notify_likes:
          type: boolean
        notify_features:
          type: boolean
        notify_ads:
          type: boolean
    # =========================================================================
    # Reactions
    # =========================================================================
    Reaction:
      example:
        {
          "data": {
              "uuid": "{uuid}",
              "emotion_id": 1,
              "sound": "{url}"
          }
        }
      properties:
        uuid:
          type: string
          format: uuid
        sound:
          type: string
        emotion_id:
          type: integer
    ReactionPost:
      example:
        {
          "reaction": {
            "question_uuid": "{uuid}",
            "emotion_id": 1,
            "sound": "{base64}"
          }
        }
      required:
        - question_uuid
        - emotion_id
        - sound
      properties:
        question_uuid:
          type: string
          format: uuid
        sound:
          type: string
          format: byte
        emotion_id:
          type: integer
    # =========================================================================
    # Topics
    # =========================================================================
    Topic:
      example:
        {
          "uuid": "{uid}",
          "name": "Neymar",
          "content": "This is a explanation.",
          "tag": "neymar",
          "sticker": "{url}",
          "category": {
            "id": 2,
            "name": "Sport",
            "color": "#2CDC6B"
          }
        }
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        content:
          type: string
        tag:
          type: string
        sticker:
          type: string
        category:
          $ref: '#/components/schemas/Category'
    Topics:
      example:
        {
          "data": [
            {
              "uuid": "{uid}",
              "name": "Neymar",
              "content": "This is a explanation.",
              "tag": "neymar",
              "sticker": "{url}",
              "category": {
                "id": 2,
                "name": "Sport",
                "color": "#2CDC6B"
              }
            }
          ]
        }
      type: array
      items:
        $ref: '#/components/schemas/Topic'
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # SECURITY
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  securitySchemes:
    Jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
